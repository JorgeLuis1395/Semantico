
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 03 05:02:24 COT 2016
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 03 05:02:24 COT 2016
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\007\000\002\002" +
    "\004\000\002\002\003\000\002\015\004\000\002\015\003" +
    "\000\002\015\004\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\021\013\000\002\024\013\000\002\025\011" +
    "\000\002\023\010\000\002\022\010\000\002\017\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\012\000\002\056" +
    "\004\000\002\016\005\000\002\026\006\000\002\040\005" +
    "\000\002\040\003\000\002\037\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\004\000\002\030\003" +
    "\000\002\062\005\000\002\031\005\000\002\046\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\057\003\000\002\047\011\000\002\035" +
    "\006\000\002\060\010\000\002\061\010\000\002\064\005" +
    "\000\002\013\006\000\002\043\007\000\002\042\003\000" +
    "\002\042\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\016\017\021\030\011\031\026\032\024\035" +
    "\013\036\006\001\002\000\004\017\021\001\002\000\014" +
    "\030\ufff6\031\ufff6\032\ufff6\035\ufff6\036\ufff6\001\002\000" +
    "\004\011\212\001\002\000\004\011\201\001\002\000\014" +
    "\030\ufffa\031\ufffa\032\ufffa\035\ufffa\036\ufffa\001\002\000" +
    "\004\011\uffeb\001\002\000\014\030\ufffc\031\ufffc\032\ufffc" +
    "\035\ufffc\036\ufffc\001\002\000\004\011\166\001\002\000" +
    "\014\030\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4\001\002" +
    "\000\004\002\ufffe\001\002\000\020\002\uffe7\010\uffe7\020" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\042\uffe7\001\002\000\004" +
    "\002\165\001\002\000\020\002\uffe8\010\uffe8\020\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\042\uffe8\001\002\000\020\017\021" +
    "\020\102\037\063\041\066\042\060\043\067\051\076\001" +
    "\002\000\014\030\011\031\026\032\024\035\013\036\006" +
    "\001\002\000\014\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036" +
    "\ufff8\001\002\000\004\011\uffe9\001\002\000\014\030\ufff2" +
    "\031\ufff2\032\ufff2\035\ufff2\036\ufff2\001\002\000\004\011" +
    "\uffea\001\002\000\014\030\ufff9\031\ufff9\032\ufff9\035\ufff9" +
    "\036\ufff9\001\002\000\014\030\ufffb\031\ufffb\032\ufffb\035" +
    "\ufffb\036\ufffb\001\002\000\014\030\ufff3\031\ufff3\032\ufff3" +
    "\035\ufff3\036\ufff3\001\002\000\014\030\ufff7\031\ufff7\032" +
    "\ufff7\035\ufff7\036\ufff7\001\002\000\004\017\021\001\002" +
    "\000\014\030\ufffd\031\ufffd\032\ufffd\035\ufffd\036\ufffd\001" +
    "\002\000\014\030\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5" +
    "\001\002\000\010\030\011\031\026\032\024\001\002\000" +
    "\004\011\042\001\002\000\004\017\021\001\002\000\004" +
    "\002\000\001\002\000\004\051\043\001\002\000\004\016" +
    "\045\001\002\000\004\017\uffe4\001\002\000\010\030\011" +
    "\031\026\032\024\001\002\000\004\021\055\001\002\000" +
    "\006\007\053\021\uffe1\001\002\000\004\011\051\001\002" +
    "\000\004\051\052\001\002\000\006\007\uffe0\021\uffe0\001" +
    "\002\000\010\030\011\031\026\032\024\001\002\000\004" +
    "\021\uffe2\001\002\000\004\017\uffe3\001\002\000\010\010" +
    "\uffdc\020\uffdc\042\uffdc\001\002\000\010\010\uffdd\020\uffdd" +
    "\042\uffdd\001\002\000\004\016\160\001\002\000\010\010" +
    "\uffdb\020\uffdb\042\uffdb\001\002\000\010\010\uffd0\020\uffd0" +
    "\042\uffd0\001\002\000\004\016\152\001\002\000\012\010" +
    "\uffd5\020\uffd5\042\uffd5\051\uffd5\001\002\000\010\010\uffd9" +
    "\020\uffd9\042\uffd9\001\002\000\004\017\147\001\002\000" +
    "\016\017\021\037\063\041\066\042\060\043\067\051\076" +
    "\001\002\000\012\010\uffd7\020\uffd7\042\uffd7\051\uffd7\001" +
    "\002\000\012\010\uffdf\020\uffdf\042\uffdf\051\132\001\002" +
    "\000\010\010\uffde\020\uffde\042\uffde\001\002\000\004\010" +
    "\124\001\002\000\010\010\uffcd\020\uffcd\042\uffcd\001\002" +
    "\000\010\010\uffda\020\uffda\042\uffda\001\002\000\010\016" +
    "\104\022\103\025\105\001\002\000\010\010\uffcf\020\uffcf" +
    "\042\uffcf\001\002\000\010\010\uffd1\020\uffd1\042\uffd1\001" +
    "\002\000\010\010\uffce\020\uffce\042\uffce\001\002\000\020" +
    "\002\uffe5\010\uffe5\020\uffe5\030\uffe5\031\uffe5\032\uffe5\042" +
    "\uffe5\001\002\000\010\047\111\050\114\051\112\001\002" +
    "\000\006\021\107\051\106\001\002\000\012\010\uffd2\020" +
    "\uffd2\042\uffd2\051\uffd2\001\002\000\004\021\110\001\002" +
    "\000\010\010\uffc8\020\uffc8\042\uffc8\001\002\000\010\010" +
    "\uffc7\020\uffc7\042\uffc7\001\002\000\022\010\uffd3\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\020\uffd3\042\uffd3\051\uffd3\001" +
    "\002\000\020\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\020\uffbf\042\uffbf\001\002\000\012\012\120\013\116\014" +
    "\117\015\121\001\002\000\020\010\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\020\uffbd\042\uffbd\001\002\000\010\047" +
    "\122\050\114\051\112\001\002\000\010\047\uffc2\050\uffc2" +
    "\051\uffc2\001\002\000\010\047\uffc1\050\uffc1\051\uffc1\001" +
    "\002\000\010\047\uffc3\050\uffc3\051\uffc3\001\002\000\010" +
    "\047\uffc0\050\uffc0\051\uffc0\001\002\000\010\010\uffbe\020" +
    "\uffbe\042\uffbe\001\002\000\010\010\uffc6\020\uffc6\042\uffc6" +
    "\001\002\000\016\017\021\037\063\041\066\042\060\043" +
    "\067\051\076\001\002\000\004\010\126\001\002\000\016" +
    "\017\021\037\063\041\066\042\060\043\067\051\076\001" +
    "\002\000\004\010\130\001\002\000\004\020\131\001\002" +
    "\000\020\002\uffe6\010\uffe6\020\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\042\uffe6\001\002\000\006\022\135\025\105\001\002" +
    "\000\012\010\uffd8\020\uffd8\042\uffd8\051\uffd8\001\002\000" +
    "\012\010\uffd6\020\uffd6\042\uffd6\051\uffd6\001\002\000\004" +
    "\047\136\001\002\000\012\010\uffd3\020\uffd3\042\uffd3\051" +
    "\uffd3\001\002\000\004\042\140\001\002\000\004\016\141" +
    "\001\002\000\004\051\142\001\002\000\004\022\145\001" +
    "\002\000\004\021\144\001\002\000\010\010\uffc9\020\uffc9" +
    "\042\uffc9\001\002\000\004\047\146\001\002\000\004\021" +
    "\uffd4\001\002\000\016\017\021\037\063\041\066\042\060" +
    "\043\067\051\076\001\002\000\004\020\151\001\002\000" +
    "\010\010\uffcb\020\uffcb\042\uffcb\001\002\000\004\051\142" +
    "\001\002\000\004\021\154\001\002\000\004\040\155\001" +
    "\002\000\016\017\021\037\063\041\066\042\060\043\067" +
    "\051\076\001\002\000\004\010\157\001\002\000\010\010" +
    "\uffcc\020\uffcc\042\uffcc\001\002\000\004\051\142\001\002" +
    "\000\004\021\162\001\002\000\004\043\163\001\002\000" +
    "\016\017\021\037\063\041\066\042\060\043\067\051\076" +
    "\001\002\000\010\010\uffca\020\uffca\042\uffca\001\002\000" +
    "\004\002\001\001\002\000\004\051\167\001\002\000\006" +
    "\022\171\026\170\001\002\000\004\047\174\001\002\000" +
    "\004\053\172\001\002\000\004\010\173\001\002\000\014" +
    "\030\uffed\031\uffed\032\uffed\035\uffed\036\uffed\001\002\000" +
    "\004\027\175\001\002\000\004\022\176\001\002\000\004" +
    "\051\177\001\002\000\004\010\200\001\002\000\014\030" +
    "\ufff0\031\ufff0\032\ufff0\035\ufff0\036\ufff0\001\002\000\004" +
    "\051\202\001\002\000\010\010\204\016\045\026\203\001" +
    "\002\000\004\047\205\001\002\000\014\030\uffec\031\uffec" +
    "\032\uffec\035\uffec\036\uffec\001\002\000\004\027\206\001" +
    "\002\000\004\022\207\001\002\000\004\047\210\001\002" +
    "\000\004\010\211\001\002\000\014\030\ufff1\031\ufff1\032" +
    "\ufff1\035\ufff1\036\ufff1\001\002\000\004\051\213\001\002" +
    "\000\006\022\215\026\214\001\002\000\004\047\220\001" +
    "\002\000\004\054\216\001\002\000\004\010\217\001\002" +
    "\000\014\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee\001" +
    "\002\000\004\027\221\001\002\000\004\010\222\001\002" +
    "\000\014\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\034\002\016\015\021\016\003\017\011\020" +
    "\006\021\007\022\022\023\004\024\013\025\024\054\014" +
    "\055\017\056\015\001\001\000\010\054\222\055\017\056" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\012\055\013\056\014\071\027\072\030\070\031\067" +
    "\035\061\043\064\046\063\047\073\054\060\055\017\056" +
    "\015\057\077\060\076\061\100\064\074\001\001\000\022" +
    "\016\032\017\033\020\006\021\027\022\026\023\031\024" +
    "\034\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\035\055\017\056\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\037\020\036\001\001\000\002" +
    "\001\001\000\010\054\040\055\017\056\015\001\001\000" +
    "\002\001\001\000\004\026\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\047\037\046\040\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\047\037" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\055\013" +
    "\056\014\071\027\136\030\070\031\067\035\061\043\064" +
    "\046\063\047\073\054\060\055\017\056\015\057\077\060" +
    "\076\061\100\064\074\001\001\000\002\001\001\000\006" +
    "\031\132\046\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\114\001\001\000\002\001\001\000\004\041\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\012\055\013\056\014\071\027\124\030\070\031\067" +
    "\035\061\043\064\046\063\047\073\054\060\055\017\056" +
    "\015\057\077\060\076\061\100\064\074\001\001\000\002" +
    "\001\001\000\044\012\055\013\056\014\071\027\126\030" +
    "\070\031\067\035\061\043\064\046\063\047\073\054\060" +
    "\055\017\056\015\057\077\060\076\061\100\064\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\012\055\013\056\014\071\027\147\030" +
    "\070\031\067\035\061\043\064\046\063\047\073\054\060" +
    "\055\017\056\015\057\077\060\076\061\100\064\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\012" +
    "\055\013\056\014\071\027\155\030\070\031\067\035\061" +
    "\043\064\046\063\047\073\054\060\055\017\056\015\057" +
    "\077\060\076\061\100\064\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\012\055\013\056\014\071" +
    "\027\163\030\070\031\067\035\061\043\064\046\063\047" +
    "\073\054\060\055\017\056\015\057\077\060\076\061\100" +
    "\064\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m +"\n");
    }
	
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
	   
    public static void main(String[] args){
        try {
            Sintactico asin = new Sintactico(
                    new Lexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("sin errores");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


   /*Aqui podemos cargar dcodigo asociado a las distintas producciones
 gramaticales, se puede poner metodos y atributos
   */
   
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador ::= MULT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionesaritmeticas ::= IDENTIFICADOR EQUAL VAL operador VAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionesaritmeticas",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // entrada ::= IDENTIFICADOR PARENTESISABIERTO IDENTIFICADOR PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entrada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamadafuncion ::= IDENTIFICADOR PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadafuncion",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // palabrado ::= DO comandosimple WHILE PARENTESISABIERTO expresion PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabrado",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // palabrawhile ::= WHILE PARENTESISABIERTO expresion PARENTESISCERRADO DO comandosimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabrawhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // palabraelse ::= PELSE LLAVEABIERTA comandosimple LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabraelse",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sinelse ::= IF PARENTESISABIERTO expresion PARENTESISCERRADO THEN comandosimple TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sinelse",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // palabraif ::= sinelse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabraif",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // controlflujo ::= palabrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // controlflujo ::= palabrawhile 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // controlflujo ::= palabraelse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // controlflujo ::= palabraif 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atribucionsimple1 ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucionsimple1",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atribucionsimple ::= IDENTIFICADOR EQUAL INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucionsimple",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= IDENTIFICADOR EQUAL INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atribucion ::= atribucionsimple1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atribucion ::= atribucion atribucionsimple1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atribucion ::= atribucionsimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atribucion ::= atribucion atribucionsimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comandosimple ::= expresionesaritmeticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comandosimple ::= llamadafuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comandosimple ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comandosimple ::= salida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandosimple ::= entrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comandosimple ::= controlflujo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandosimple ::= atribucion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funval ::= tipovariable DOSP IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funval",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // recur ::= funval 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("recur",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // recur ::= funval COMA funval 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("recur",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listater ::= IDENTIFICADOR PARENTESISABIERTO recur PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listater",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjuntoFunciones ::= tipovariable DOSP listater 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloquecomandossin ::= LLAVEABIERTA LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloquecomandossin",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloquecomandos ::= LLAVEABIERTA comandosimple TER comandosimple TER comandosimple TER LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloquecomandos",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque ::= bloquecomandossin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= bloquecomandos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovariable ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= FLOA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovariable ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variableGlobal1 ::= tipovariable DOSP IDENTIFICADOR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableGlobal1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vGlobalchart ::= CHA DOSP IDENTIFICADOR EQUAL CHAR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalchart",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vGlobalString ::= string DOSP IDENTIFICADOR EQUAL STRING TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalString",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vGlobalVectorSTR ::= string DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVectorSTR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vGlobalVectorCHA ::= CHA DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL IDENTIFICADOR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVectorCHA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vGlobalVector ::= tipovariable DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL INTEGER TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVector",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariablesGlobales ::= vGlobalVectorSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVectorSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariablesGlobales ::= vGlobalVectorCHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVectorCHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionVariablesGlobales ::= vGlobalString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionVariablesGlobales ::= vGlobalchart 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalchart 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionVariablesGlobales ::= vGlobalVector 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVector 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionVariablesGlobales ::= variableGlobal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracionVariablesGlobales ::= declaracionVariablesGlobales variableGlobal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= conjuntoFunciones bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracionVariablesGlobales conjuntoFunciones bloque conjuntoFunciones bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

