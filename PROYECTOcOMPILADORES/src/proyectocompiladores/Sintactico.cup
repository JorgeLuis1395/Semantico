
package proyectocompiladores;
import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;
   
   action code {:
   /*Aqui podemos cargar dcodigo asociado a las distintas producciones
 gramaticales, se puede poner metodos y atributos
   */
   :}
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
	
	
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m +"\n");
    }
	
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
	   
    public static void main(String[] args){
        try {
            Sintactico asin = new Sintactico(
                    new Lexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("sin errores");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

terminal           IGUALIGUAL,MAYORIGUAL,MENORIGUAL,COMA,TER, DOSP, SUMA,RESTA,MULT, DIV, PARENTESISABIERTO, LLAVEABIERTA,LLAVECERRADA,PARENTESISCERRADO,EQUAL,MENOR,MAYOR,INCREMENTO,CORCHIZQ,CORCHDER,INT,FLOA,BOOL, INICIO, FIN , CHA ,string,IF,THEN,PELSE,WHILE,DO,INPUT,OUTPUT,RET;
terminal          Integer   INTEGER,FLOTANTE;
terminal Object IDENTIFICADOR,BOOLEANO,CHAR,STRING;


non terminal  Object  programa, sent, sentencia,variablesGlobales, CuerpoPrograma, variableGlobal,tipoVarLocal, usovariables;
non terminal Object   salida,entrada,controlflujo,declaracionVariablesGlobales, conjuntoFunciones, variableGlobal1, tipovariable, vGlobalVector,vGlobalchart,vGlobalString,vGlobalVectorCHA,vGlobalVectorSTR, listater, comandosimple,atribucion,atribucionsimple,atribucionsimplevec,atribucionveccha,atribucionvecstr,palabraelse;
non terminal Object   comandosimple2,funval,recur,VAL, ASIG,expresionesaritmeticas,expresioninteger,operador,atribucionsimple1,sinelse,conelse,comandosimplevec,comandosimpleveccha,comandosimplevecstr,bloque,bloquecomandos,bloquecomandossin,palabraif,palabrawhile,palabrado,expresion,comandovacio,llamadafuncion;


   //GRAMATICA
start with programa;

programa ::= programa declaracionVariablesGlobales 
              bloque conjuntoFunciones bloque
			|conjuntoFunciones bloque
			|bloque
;

//variables globales
declaracionVariablesGlobales ::=  declaracionVariablesGlobales variableGlobal1  
                                 |variableGlobal1
                                 |declaracionVariablesGlobales vGlobalVector  
                                 |vGlobalVector
								 |declaracionVariablesGlobales vGlobalchart
								 |vGlobalchart
								 |declaracionVariablesGlobales vGlobalString
								 |vGlobalString
								 |declaracionVariablesGlobales vGlobalVectorCHA  
                                 |vGlobalVectorCHA
								 |declaracionVariablesGlobales vGlobalVectorSTR  
                                 |vGlobalVectorSTR
								 
;
vGlobalVector ::=  tipovariable DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL INTEGER TER

;
vGlobalVectorCHA ::=  CHA DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL IDENTIFICADOR TER;
vGlobalVectorSTR ::=  string DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER TER;
vGlobalString ::= string DOSP IDENTIFICADOR EQUAL STRING TER;
vGlobalchart ::= CHA DOSP IDENTIFICADOR EQUAL CHAR TER;
variableGlobal1 ::= tipovariable DOSP IDENTIFICADOR TER ;
tipovariable ::= INT 
                |FLOA
				|BOOL
				;
				
bloque ::= bloquecomandos
		   |bloquecomandossin
			;
			
bloquecomandos ::= LLAVEABIERTA comandosimple  TER comandosimple  TER comandosimple  TER  LLAVECERRADA 
				;
bloquecomandossin ::= LLAVEABIERTA   LLAVECERRADA;		


conjuntoFunciones ::= tipovariable DOSP listater;
listater ::= IDENTIFICADOR PARENTESISABIERTO recur PARENTESISCERRADO ;
recur ::= funval COMA funval
		|funval;                
funval ::= tipovariable DOSP IDENTIFICADOR;
//comandosimple
comandosimple ::=  atribucion
					| controlflujo 
					| entrada 
					| salida 
					|bloque
					| llamadafuncion 
					|expresionesaritmeticas
					
					;
	//atribucion		
atribucion ::= atribucion atribucionsimple 
				|atribucionsimple
				|atribucion atribucionsimple1
				|atribucionsimple1
			;
expresion ::= IDENTIFICADOR EQUAL INTEGER;			 			
atribucionsimple ::= IDENTIFICADOR EQUAL INTEGER;
atribucionsimple1  ::= IDENTIFICADOR INCREMENTO;
controlflujo ::= palabraif
				|palabraelse
				|palabrawhile
				|palabrado
				;
palabraif ::=  sinelse;
sinelse ::=IF PARENTESISABIERTO expresion PARENTESISCERRADO  THEN comandosimple TER  ;
palabraelse ::= PELSE LLAVEABIERTA comandosimple  LLAVECERRADA;
palabrawhile ::=WHILE PARENTESISABIERTO expresion PARENTESISCERRADO DO comandosimple  ;
palabrado ::=DO comandosimple  WHILE PARENTESISABIERTO expresion PARENTESISCERRADO;

//llamadafuncion
llamadafuncion ::= IDENTIFICADOR PARENTESISABIERTO PARENTESISCERRADO ;				
// ENTRADA
entrada ::= IDENTIFICADOR PARENTESISABIERTO IDENTIFICADOR PARENTESISCERRADO;

//expresionesaritmeticas
expresionesaritmeticas ::= IDENTIFICADOR EQUAL VAL operador VAL ;
ASIG ::= MAYOR
		|MENOR;
operador ::= SUMA	
			|RESTA
			|MULT
			|DIV;
VAL ::= IDENTIFICADOR
		|INTEGER
		|FLOTANTE;

